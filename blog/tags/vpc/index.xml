<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vpc on Parth&#39;s Thoughts</title>
    <link>https://parthbuch.com/blog/tags/vpc/</link>
    <description>Recent content in Vpc on Parth&#39;s Thoughts</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Sat, 08 Oct 2016 23:20:00 +0530</lastBuildDate>
    <atom:link href="https://parthbuch.com/blog/tags/vpc/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Connecting AWS VPC to Azure VNet using IPsec Tunnel</title>
      <link>https://parthbuch.com/blog/post/azure-aws-interconnect/</link>
      <pubDate>Sat, 08 Oct 2016 23:20:00 +0530</pubDate>
      
      <guid>https://parthbuch.com/blog/post/azure-aws-interconnect/</guid>
      <description>

&lt;p&gt;Here is how you can connect Amazon VPC to Azure VNet using a secure tunnel.&lt;/p&gt;


&lt;img class=&#34;pure-img&#34; src=&#34;https://parthbuch.com/blog/img/azure-aws-diagram.jpg&#34; alt=&#34;&#34;&gt;


&lt;p&gt;Hi Folks,&lt;/p&gt;

&lt;p&gt;My current workplace is planning a migration from AWS to Azure.
As we all know, migrating from one cloud provider with multiple servers to another provider is a complex task. In our case we wanted to move one environment at a time. This way we can move the whole stack for lets say TEST environment to Azure and validate our changes.&lt;/p&gt;

&lt;p&gt;In this blog post i will show how to create a site to site IPSec tunnel that connects VPC (Virtual Private Cloud) hosted in AWS to VNet (Virtual Network) in Azure. Using this setup we can have servers in both clouds have full connectivity over IPsec tunnel.&lt;/p&gt;

&lt;p&gt;We are a full Linux shop so we selected an Ubuntu running Strongswan as the point of tunel on the AWS side and Azure Virtual Gateway on Azure side.&lt;/p&gt;

&lt;p&gt;So lets get started&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;setting-up-your-vpc&#34;&gt;Setting up your VPC&lt;/h3&gt;

&lt;p&gt;If you already have a VPC setup, go ahead and skip this scetion.&lt;/p&gt;

&lt;p&gt;Using the AWS concolse, create a new vpc, i am going to use &lt;code&gt;172.30.0.0/16&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://parthbuch.com/blog/img/create-vpc.png&#34; alt=&#34;Create new VPC&#34; title=&#34;Create new VPC&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Create a new subnet in the given VPC. I am going to use &lt;code&gt;172.30.0.0/24&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://parthbuch.com/blog/img/create-subnet.png&#34; alt=&#34;Create new VPC&#34; title=&#34;Create new Subnet&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then launch a new EC2 Ubuntu instance in the VPC and subnet created in step above :&lt;/p&gt;

&lt;p&gt;Click on Launch new instance :&lt;/p&gt;


&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;https://parthbuch.com/blog/img/create_instance_1.png&#34; &gt;
&lt;/div&gt;


&lt;p&gt;Select Ubunt 16.04 LTS from the list :&lt;/p&gt;


&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;https://parthbuch.com/blog/img/create_instance_2.png&#34; &gt;
&lt;/div&gt;


&lt;p&gt;Select the VPC we created above and check if Auto-assign IP is selected :&lt;/p&gt;


&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;https://parthbuch.com/blog/img/create_instance_3.png&#34; &gt;
&lt;/div&gt;


&lt;p&gt;Copy the Public IP once the instance is launched, we will be using it in next steps:&lt;/p&gt;


&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;https://parthbuch.com/blog/img/create_instance_4.png&#34; &gt;
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Disable source/destination checking on the instance&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now, by default a new instance launced in Subnet will get an public IP, If you have changed the default behaviour you will have to allocate a new Elastic IP address and associate it with the instance.&lt;/p&gt;

&lt;p&gt;Its usually a good idea to change or add the hostname of your EC2 instance to its &lt;code&gt;/etc/hosts&lt;/code&gt; file as StrongSwan&amp;rsquo;s ipsec command tries to look for the current instance&amp;rsquo;s hostname:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vim /etc/hostname
vim /etc/hosts
sudo service hostname restart
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;deploying-the-azure-vnet-and-gateway&#34;&gt;Deploying the Azure VNet and Gateway&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;We are going to use the Resource Group deployment model. So go ahead and create a Resource group and name it as &lt;strong&gt;Azure2Aws&lt;/strong&gt; :&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;https://parthbuch.com/blog/img/create_azure_1.png&#34; &gt;
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Next add a Virtual Network (VNet) in the resource group :&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;https://parthbuch.com/blog/img/create_azure_2.png&#34; &gt;
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Fill in the required details. For the Azure side of things i am going to create subnet in the address range of &lt;code&gt;172.40.0.0/24&lt;/code&gt;. So that we donot have issue with the subnet on AWS side.&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;https://parthbuch.com/blog/img/create_azure_3.png&#34; &gt;
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;In the Virtual Network change the Gateway subnet to &lt;code&gt;172.40.200.0/29&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;https://parthbuch.com/blog/img/create_azure_4.png&#34; &gt;
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Next add a Virtual Network Gateway in the resource Group&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;https://parthbuch.com/blog/img/create_azure_5.png&#34; &gt;
&lt;/div&gt;


&lt;p&gt;Click create in the Virtual network gateway blade, fill in the info as below. (It may take upto 30 mins to allocate this gateway)&lt;/p&gt;


&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;https://parthbuch.com/blog/img/create_azure_6.png&#34; &gt;
&lt;/div&gt;


&lt;p&gt;Note down the Public IP Address of the Virtual network Gateway. We will need it later.&lt;/p&gt;


&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;https://parthbuch.com/blog/img/create_azure_7.png&#34; &gt;
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Next add a Local Network Gateway in &lt;strong&gt;Azure2Aws&lt;/strong&gt;:&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;https://parthbuch.com/blog/img/create_azure_8.png&#34; &gt;
&lt;/div&gt;


&lt;p&gt;Fill the information of AWS VPC (IP Address assigned to our strongswan server). Put &lt;code&gt;172.30.0.0/16&lt;/code&gt; in the address space, this is the address space of our VPC&lt;/p&gt;


&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;https://parthbuch.com/blog/img/create_azure_9.png&#34; &gt;
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Wait till the Local network Gateway is created. Once it is created, in the settings of local network gateway create a new connection.&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;https://parthbuch.com/blog/img/create_azure_10.png&#34; &gt;
&lt;/div&gt;


&lt;p&gt;Give ita a name &lt;code&gt;Azure2awsconnect&lt;/code&gt;, attach the Virtual network gateway we created earlier. Add a secure PSK, DO NOT use  &lt;code&gt;abcde12345&lt;/code&gt; in production environment.&lt;/p&gt;

&lt;h3 id=&#34;setup-strongswan&#34;&gt;Setup Strongswan&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;First install strongswan on your ubuntu instance
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install update
sudo apt-get install strongswan
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Modify &lt;code&gt;/etc/strongswan/ipsec.conf&lt;/code&gt; with these settings
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;conn azure
  authby=secret
  type=tunnel
  leftsendcert=never
  left=[IP Address of this Server]
  leftsubnet=172.30.0.0/16
  right=[IP Address of Azure Gateway]
  rightsubnet=172.40.0.0/24
  keyexchange=ikev2
  ikelifetime=10800s
  keylife=57m
  keyingtries=1
  rekeymargin=3m
  compress=no
  auto=start
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Here are the keys you should change for your specific deployment:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;left - The local ip address of the strongswan server&lt;/li&gt;
&lt;li&gt;leftsubnet - The local subnet of the VPC&lt;/li&gt;
&lt;li&gt;right - The public IP address of the Azure VNet Gateway&lt;/li&gt;
&lt;li&gt;rightsubnet - The local subnet of the Azure VNet (not to be confused with the gateway subnet)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now we need to configure StrongSwan with the shared secret key. Modify the file at &lt;code&gt;/etc/strongswan/ipsec.secrets&lt;/code&gt; and add the line:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;[STRONGSWAN LOCAL IP] [AZURE VNET GATEWAY PUBLIC IP] : PSK &amp;quot;[YOUR SHARED KEY]&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The shared key should be the same as one we gave in Local network Gateway connection.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;For the strong swan instance to forward traffic between Azure VNet and AWS VPC, we&amp;rsquo;ll have to enable forwarding. On the EC2 instance, uncomment or add the following line to the file, /etc/sysctl.conf:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;net.ipv4.ip_forward=1
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Restart strongswan for changes to get reflected&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo service strongswan restart
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;testing-the-connection&#34;&gt;Testing the Connection&lt;/h3&gt;

&lt;p&gt;We can test this connection by creating a VM in the Azure VNet and pinging it from our Strongswan server.&lt;/p&gt;

&lt;p&gt;Lets say the ip for the Azure VM is &lt;code&gt;172.40.0.5&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;From the AWS instance try&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ping 172.40.0.5
64 bytes from 172.40.0.5: icmp_seq=892 ttl=62 time=26.1 ms
64 bytes from 172.40.0.5: icmp_seq=893 ttl=62 time=26.2 ms
64 bytes from 172.40.0.5: icmp_seq=894 ttl=62 time=25.8 ms
...
64 bytes from 172.40.0.5: icmp_seq=929 ttl=62 time=25.4 ms
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should see the same thing as well when you ping the the Azure instance to AWS&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ping 172.30.0.10
64 bytes from 172.30.0.10: icmp_seq=892 ttl=62 time=26.1 ms
64 bytes from 172.30.0.10: icmp_seq=893 ttl=62 time=26.2 ms
64 bytes from 172.30.0.10: icmp_seq=894 ttl=62 time=25.8 ms
...
64 bytes from 172.30.0.10: icmp_seq=929 ttl=62 time=25.4 ms
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>